package cz.brmlab.yodaqa.analysis.ansscore;

/** Global index of answer features.
 *
 * Even though answer feature names are plain string, always construct them
 * using constants in this class (typically by simply referring to them,
 * but sometimes you may want to add a suffix).  The motivation for this
 * is two-fold:
 *
 *   - Prevent typos when referring to feature names.
 *   - Prevent name collisions.
 *
 * FIXME: Auto-generated features are still not permitted now, you must
 * list them all in AnswerFV.labels[] at this point.
 *
 * TODO: In time, we may decide to create subsidiary feature name indices
 * at package level.
 *
 * TODO: This largely comes from a time when features were UIMA types
 * and it wasn't possible to generate the names. We could trim this down
 * significantly building feature names more dynamically. */

public class AF {
	/** Answer Feature: Number of times this answer has been generated */
	public static final String Occurences = "occurences";
	/** Answer Feature: Reciprocal rank (1/r) of the result where this
	 * answer originates */
	public static final String ResultRR = "resultRR";
	/** Answer Feature: Log-score (by solr) of the result that produced
	 * the supporting passage */
	public static final String ResultLogScore = "resultLogScore";
	/** Answer Feature: Log-score of the passage that produced this answer */
	public static final String PassageLogScore = "passageLogScore";
	/** Answer Feature: [0,1] score of originating property within
	 * structured database search. As determined e.g. by the fbpath model
	 * (estimated probability of it holding the correct answer). */
	public static final String PropertyScore = "propertyScore";

	/** Answer Feature: [0,1] score of originating property within
	 * structured database search. As determined by word embedding matrix,
	 * based on the label. */
	public static final String PropertyGloVeScore = "propertyGloVeScore";


	/** Answer Feature: 1 if the origin of this answer is an in-document
	 * passage */
	public static final String OriginPsg = "originPsg";
	/** Answer Feature: 1 if the origin of this answer is the first
	 * passage of document (often a blurb packed with is-a relationships
	 * information) */
	public static final String OriginPsgFirst = "originPsgFirst";
	/** 1 if the origin of this answer is a passage that was selected
	 * because it matched a clue that's given in the feature name.
	 * A set of features with autogenerated names, e.g.
	 * "originPsgByClueToken". */
	public static final String OriginPsgBy_ClueType = "originPsgBy" /* + clue.getShortName() or AF._clueType_* */;

	/** Answer Feature: 1 if the origin of this answer is a noun phrase
	 * parsed in a passage */
	public static final String OriginPsgNP = "originPsgNP";
	/** Answer Feature: 1 if the origin of this answer is a named entity
	 * matched in a passage. (TODO: Also distinguish the type of matched
	 * named entity?) */
	public static final String OriginPsgNE = "originPsgNE";
	/** Answer Feature: 1 if the origin of this answer is a noun phrase
	 * parsed in a passage that is object of a subject that matches
	 * question LAT. ("What is critical mass of X?" ->
	 * "Critical mass is ***") */
	public static final String OriginPsgNPByLATSubj = "originPsgNPByLATSubj";
	/** Answer Feature: 1 if the origin of this answer is a mention
	 * detected by a B-I-O tagger */
	public static final String OriginPsgBIO = "originPsgBIO";
	/** Answer Feature: 1 if the origin of this answer is a passage that
	 * does not end with a question clue */
	public static final String OriginPsgSurprise = "originPsgSurprise";

	/** Answer Feature: 1 if the origin of this answer is a document title */
	public static final String OriginDocTitle = "originDocTitle";

	/** Answer Feature: 1 if the origin of this answer is a snippet from bing web fulltext search */
	public static final String OriginBingSnippet = "originBingSnippet";

	/** Answer Feature: 1 if the origin of this answer is the DBpedia
	 * curated ontology. */
	public static final String OriginDBpOntology = "originDBpOntology";
	/** Answer Feature: Negative evidence set to -1 if the origin of this
	 * answer is a DBpedia curated ontology property that does not match
	 * any question clue in its label. */
	public static final String OriginDBpONoClue = "originDBpONoClue";
	/** 1 if the origin of this answer is a DBpedia curated ontology
	 * property with a clue matching a word in the property name.
	 * A set of features with autogenerated names, e.g.
	 * "originDBpOClueToken". */
	public static final String OriginDBpO_ClueType = "originDBpO" /* + clue.getShortName() or AF._clueType_* */;

	/** Answer Feature: 1 if the origin of this answer is the DBpedia
	 * raw infobox property. */
	public static final String OriginDBpProperty = "originDBpProperty";
	/** Answer Feature: Negative evidence set to -1 if the origin
	 * of this answer is a DBpedia raw infobox property that does not
	 * match any question clue in its label. */
	public static final String OriginDBpPNoClue = "originDBpPNoClue";
	/** 1 if the origin of this answer is a DBpedia raw infobox
	 * property with a clue matching a word in the property name.
	 * A set of features with autogenerated names, e.g.
	 * "originDBpPClueToken". */
	public static final String OriginDBpP_ClueType = "originDBpP" /* + clue.getShortName() or AF._clueType_* */;

	/** Answer Feature: 1 if the origin of this answer is the Freebase
	 * curated ontology. */
	public static final String OriginFreebaseOntology = "originFreebaseOntology";
	/** Answer Feature: 1 if the origin of this answer is a specifically
	 * queried relation (based on the fbpath machine learned model) in the
	 * Freebase curated ontology. */
	public static final String OriginFreebaseSpecific = "originFreebaseSpecific";
	/** Answer Feature: 1 if the origin of this answer is a specifically
	 * queried relation that is branched.  That is, aside of a 2-relation
	 * path, an extra witness bound by a third relation to the intermediate
	 * node has been matched to a question concept. */
	public static final String OriginFreebaseBranched = "originFreebaseBranched";
	/** Answer Feature: 1 if the origin of this answer is a specifically
	 * queried branched relation that matched a witness concept by mid. */
	public static final String OriginFreebaseWitnessMid = "originFreebaseWitnessMid";
	/** Answer Feature: 1 if the origin of this answer is a specifically
	 * queried branched relation that matched a witness concept by label. */
	public static final String OriginFreebaseWitnessLabel = "originFreebaseWitnessLabel";
	/** Answer Feature: Negative evidence set to -1 if the origin of this
	 * answer is a DBpedia curated ontology property that does not match
	 * any question clue in its label. */
	public static final String OriginFBONoClue = "originFBONoClue";
	/** 1 if the origin of this answer is a Freebase curated ontology
	 * property with a clue matching a word in the property name.
	 * A set of features with autogenerated names, e.g.
	 * "originDBpPClueToken". */
	public static final String OriginFBO_ClueType = "originFBO" /* + clue.getShortName() or AF._clueType_* */;

	/** Answer Feature: 1 if the origin of this answer is a document
	 * corresponding to in-question concept */
	public static final String OriginConcept = "originConcept";
	/** Answer Feature: 1 if the origin of this answer is a document
	 * corresponding to in-question concept subduing question subject clue */
	public static final String OriginConceptBySubject = "originConceptBySubject";
	/** Answer Feature: 1 if the origin of this answer is a document
	 * corresponding to in-question concept subduing question focus clue */
	public static final String OriginConceptByLAT = "originConceptByLAT";
	/** Answer Feature: 1 if the origin of this answer is a document
	 * corresponding to in-question concept subduing question NamedEntity
	 * clue */
	public static final String OriginConceptByNE = "originConceptByNE";
	/** Various autogenerated feature names pertaining to concept
	 * characteristics. The -Concept- is already aprt of AF._clueType_* */
	public static final String OriginConcept_feat = "origin" /* + AF._clueType_*Concept */;

	/** Answer Feature: 1 if this answer was generated by multiple
	 * orthogonal annotators. */
	public static final String OriginMultiple = "originMultiple";

	/** exp(-delta) where delta is number of characters between the clue
	 * and this answer in the passage text.
	 * A set of features with autogenerated names, e.g.
	 * "originDBpPClueToken". */
	public static final String PsgDist_ClueType = "psgDist" /* + clue.getShortName() or AF._clueType_* */;
	/** Answer Feature: If generated by a B-I-O tagger, the confidence
	 * score of the mention estimated by the tagger */
	public static final String BIOScore = "bioScore";

	/** Answer Feature: Negative evidence (-1.0), indicates a failed type
	 * coercion.  i.e. both question and answer have some recognizable
	 * LATs but there is no match found */
	public static final String NoTyCor = "noTyCor";
	/** Answer Feature: Negative evidence (-1.0), indicates that no LAT
	 * has been generated for this answer at all */
	public static final String LATANone = "LATANone";
	/** Answer Feature: Specificity measured as WordNet graph exp(-distance).
	 * I.e. 1 is perfect match, 1/e is very specific, ..., 1/e^4 is already
	 * very non-specific */
	public static final String SpWordNet = "spWordNet";
	/** Answer Feature: Question LAT has no derivable WordNet LATs. */
	public static final String LATQNoWordNet = "LATQNoWordNet";
	/** Answer Feature: Answer LAT has no derivable WordNet LATs
	 * (but does have *some* LATs). */
	public static final String LATANoWordNet = "LATANoWordNet";
	/** Answer Feature: Question LAT is direct hypernyme of the answer LAT. */
	public static final String TyCorSpQHit = "tyCorSpQHit";
	/** Answer Feature: Answer LAT is direct hypernyme of the question LAT. */
	public static final String TyCorSpAHit = "tyCorSpAHit";
	/** Answer Feature: Negative evidence (-1.0) indicates that both answer
	 * and question LAT had to be generalized to achieve a match. */
	public static final String TyCorSpNoHit = "tyCorSpNoHit";
	/** Answer Feature: Answer LAT perfectly matches the question LAT. */
	public static final String TyCorSpQAHit = "tyCorSpQAHit";
	/** Answer Feature: There have been multiple (question,answer) LAT
	 * pairs where one of them did not need generalization to match.
	 * This could indicate stronger type match evidence (coming from
	 * multiple sources). */
	public static final String TyCorSpMultiHit = "tyCorSpMultiHit";

	/* TODO: Autogenerate. */
	/** Answer Feature: Matched answer LAT has been generated by answer
	 * named entity type. */
	public static final String TyCorANE = "tyCorANE";
	/** Answer Feature: Matched answer LAT has been generated by DBpedia
	 * rdf:type of the concept. */
	public static final String TyCorADBp = "tyCorADBp";
	/** Answer Feature: Matched answer LAT has been generated by DBpedia
	 * dbpedia2:wordnet_type of the concept. */
	public static final String TyCorADBpWN = "tyCorADBpWN";
	/** Answer Feature: Matched answer LAT has been generated by quantity
	 * statement. */
	public static final String TyCorAQuantity = "tyCorAQuantity";
	/** Answer Feature: Matched answer LAT has been generated by numerical
	 * quantity statement. */
	public static final String TyCorAQuantityCD = "tyCorAQuantityCD";
	/** Answer Feature: Matched answer LAT has been generated by Wordnet
	 * instance-of relation to the concept in focus. */
	public static final String TyCorAWnInstance = "tyCorAWnInstance";
	/** Answer Feature: Matched answer LAT has been generated by a DBpedia
	 * curated ontology property. */
	public static final String TyCorADBpOntology = "tyCorADBpOntology";
	/** Answer Feature: Matched answer LAT has been generated by a DBpedia
	 * raw infobox property. */
	public static final String TyCorADBpProperty = "tyCorADBpProperty";
	/** Answer Feature: Matched answer LAT has been generated by a Freebase
	 * curated ontology property. */
	public static final String TyCorAFBOntology = "tyCorAFBOntology";

	/** Answer Feature: Nearby match of a question LAT within the
	 * answer-bearing passage.  This value carries the specificity
	 * of the question LAT, weighed by the word exp-inverse-distance
	 * from the answer (see below). */
	public static final String TyCorPassageSp = "tyCorPassageSp";
	/** Answer Feature: Nearby match of a question LAT within the
	 * answer-bearing passage.  This value carries exp-inverse-distance
	 * in characters between the LAT word and the answer segment, with
	 * 1 being that the LAT is one of the answer words or just nearby. */
	public static final String TyCorPassageDist = "tyCorPassageDist";
	/** Answer Feature: Nearby match of a question LAT within the
	 * answer-bearing passage; this value is 1.0 if the LAT word match
	 * is actually within the answer. */
	public static final String TyCorPassageInside = "tyCorPassageInside";

	/** Answer Feature: A score as determined by our good old original
	 * simple scoring routine that uses just a handful of naive features. */
	public static final String SimpleScore = "simpleScore";

	/** Answer Feature: Boolean value whether we did *not* generate an
	 * answer focus (like in case of numerical-only answers). */
	public static final String AnswerFocusNone = "answerFocusNone";
	/** Answer Feature: Boolean value whether we generated a focus that
	 * spans the whole answer (typically a single-token answer). */
	public static final String AnswerFocusWhole = "answerFocusWhole";

	/* TODO: Autogenerate. */
	/** Answer Feature: Boolean value whether we generated a LAT that
	 * is the kind of named entity recognized. */
	public static final String LATNE = "LATNE";
	/** Answer Feature: Boolean value whether we generated a LAT that
	 * is based on DBpedia entity type. */
	public static final String LATDBpType = "LATDBpType";
	/** Answer Feature: Boolean value whether we generated a LAT that
	 * is based on DBpedia entity wordnet type. */
	public static final String LATDBpWNType = "LATDBpWNType";
	/** Answer Feature: Boolean value whether we generated a LAT based
	 * on seeing a quantity statement. */
	public static final String LATQuantity = "LATQuantity";
	/** Answer Feature: Boolean value whether we generated a LAT based
	 * on seeing a concrete numeric quantity. */
	public static final String LATQuantityCD = "LATQuantityCD";
	/** Answer Feature: Boolean value whether we generated a LAT that
	 * is the other side of a Wordnet instance-of relation. */
	public static final String LATWnInstance = "LATWnInstance";
	/** Answer Feature: Boolean value whether we generated a LAT that
	 * is a DBpedia curated ontology property name. */
	public static final String LATDBpOntology = "LATDBpOntology";
	/** Answer Feature: Boolean value whether we generated a LAT that
	 * is a DBpedia raw infobox property name. */
	public static final String LATDBpProperty = "LATDBpProperty";
	/** Answer Feature: Boolean value whether we generated a LAT that
	 * is a Freebase curated ontology property name. */
	public static final String LATFBOntology = "LATFBOntology";

	/* TODO: Autogenerate. */
	/** Answer Feature (Clue Overlap): #of non-conceptual clues that
	 * are syntactically equivalent to this answer. */
	public static final String ClOMatchScore = "clOMatchScore";
	/** Answer Feature (Clue Overlap): #of non-conceptual clues that
	 * are syntactic prefixes of this answer. */
	public static final String ClOPrefixedScore = "clOPrefixedScore";
	/** Answer Feature (Clue Overlap): #of non-conceptual clues that
	 * this answer is a syntactic prefix of. */
	public static final String ClOPrefixingScore = "clOPrefixingScore";
	/** Answer Feature (Clue Overlap): #of non-conceptual clues that
	 * are syntactic suffixes of this answer. */
	public static final String ClOSuffixedScore = "clOSuffixedScore";
	/** Answer Feature (Clue Overlap): #of non-conceptual clues that
	 * this answer is a syntactic suffix of. */
	public static final String ClOSuffixingScore = "clOSuffixingScore";
	/** Answer Feature (Clue Overlap): #of non-conceptual clues that
	 * are syntactic substrings of this answer. */
	public static final String ClOSubstredScore = "clOSubstredScore";
	/** Answer Feature (Clue Overlap): #of non-conceptual clues that
	 * this answer is a syntactic substring of. */
	public static final String ClOSubstringScore = "clOSubstringScore";
	/** Answer Feature (Clue Overlap): #of non-conceptual clues that
	 * either prefix or suffix this answer if both happens. */
	public static final String ClOMetaMatchScore = "clOMetaMatchScore";
	/** Answer Feature (Clue Overlap): #of conceptual clues that are
	 * syntactically equivalent to this answer. */
	public static final String ClOCMatchScore = "clOCMatchScore";
	/** Answer Feature (Clue Overlap): #of conceptual clues that are
	 * syntactic prefixes of this answer. */
	public static final String ClOCPrefixedScore = "clOCPrefixedScore";
	/** Answer Feature (Clue Overlap): #of conceptual clues that this
	 * answer is a syntactic prefix of. */
	public static final String ClOCPrefixingScore = "clOCPrefixingScore";
	/** Answer Feature (Clue Overlap): #of conceptual clues that are
	 * syntactic suffixes of this answer. */
	public static final String ClOCSuffixedScore = "clOCSuffixedScore";
	/** Answer Feature (Clue Overlap): #of conceptual clues that this
	 * answer is a syntactic suffix of. */
	public static final String ClOCSuffixingScore = "clOCSuffixingScore";
	/** Answer Feature (Clue Overlap): #of conceptual clues that are
	 * syntactic substrings of this answer. */
	public static final String ClOCSubstredScore = "clOCSubstredScore";
	/** Answer Feature (Clue Overlap): #of conceptual clues that this
	 * answer is a syntactic substring of. */
	public static final String ClOCSubstringScore = "clOCSubstringScore";
	/** Answer Feature (Clue Overlap): #of conceptual clues that either
	 * prefix or suffix this answer if both happens. */
	public static final String ClOCMetaMatchScore = "clOCMetaMatchScore";
	/** Answer Feature (Evidence Diffusion): Sum of scores of all answers
	 * that are syntactic prefixes of this answer. */
	public static final String EvDPrefixedScore = "evdPrefixedScore";
	/** Answer Feature (Evidence Diffusion): Sum of scores of all answers
	 * that this answer is a syntactic prefix of. */
	public static final String EvDPrefixingScore = "evdPrefixingScore";
	/** Answer Feature (Evidence Diffusion): Sum of scores of all answers
	 * that are syntactic suffixes of this answer. */
	public static final String EvDSuffixedScore = "evdSuffixedScore";
	/** Answer Feature (Evidence Diffusion): Sum of scores of all answers
	 * that this answer is a syntactic suffix of. */
	public static final String EvDSuffixingScore = "evdSuffixingScore";
	/** Answer Feature (Evidence Diffusion): Sum of scores of all answers
	 * that are syntactic substrings of this answer. */
	public static final String EvDSubstredScore = "evdSubstredScore";
	/** Answer Feature (Evidence Diffusion): Sum of scores of all answers
	 * that this answer is a syntactic substring of. */
	public static final String EvDSubstringScore = "evdSubstringScore";

	/** Answer Feature: Boolean value whether we are one of the top
	 * answers selected by earlier scoring. */
	public static final String TopAnswer = "topAnswer";

	/** Answer Feature: Unbounded integer representing the number of
	 * search hits for question + answer. */
	public static final String SolrHitsEv = "solrHitsEv";
	/** Answer Feature: Unbounded integer representing the number of
	 * search hits for answer. */
	public static final String SolrAHitsEv = "solrAHitsEv";
	/** Answer Feature: Unbounded integer representing the number of
	 * search hits for question + answer, normalized by number of
	 * search hits for just the answer. */
	public static final String SolrHitsANormEv = "solrHitsANormEv";
	/** Answer Feature: Unbounded float representing the maximum score
	 * among search hits for question + answer. */
	public static final String SolrMaxScoreEv = "solrMaxScoreEv";
	/** Answer Feature: Unbounded float representing SolrHitsEv *
	 * SolrMaxScoreEv. */
	public static final String SolrHitsMaxScoreEv = "solrHitsMaxScoreEv";

	/** Answer Feature: Confidence computed in phase 0
	 * (for use by next phases). */
	public static final String Phase0Score = "phase0Score";
	/** Answer Feature: Confidence computed in phase 1
	 * (for use by next phases). */
	public static final String Phase1Score = "phase1Score";

	/** Clue type suffix that represents the reciprocial rank of
	 * the source clue when sorted by best-generated-score. */
	public static final String _clueType_ConceptSourceRR = "ConceptSourceRR";
	/** Clue type suffix that represents the reciprocial rank of
	 * the generated labelled concept when sorted by score. */
	public static final String _clueType_ConceptLabelRR = "ConceptLabelRR";
	/** Clue type suffix that represents the score of the generating
	 * concept. */
	public static final String _clueType_ConceptScore = "ConceptScore";

	/** Answer Feature: 1 if question is in corresponding class */
	/** A set of features with autogenerated names, e.g.
	* "questionClassABBR". */
	public static final String QuestionClass_ClassName = "questionClass";
};
